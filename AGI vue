import type { JSX } from '@agi.s/ui-components';
export declare const AiBackdrop: import("vue").DefineComponent<JSX.AiBackdrop & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    visible?: boolean | undefined;
    constructor?: Function | undefined;
    tappable?: boolean | undefined;
    stopPropagation?: boolean | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
    onAiBackdropTap?: ((event: CustomEvent<void>) => void) | undefined;
}>, {}>;
export declare const AiButton: import("vue").DefineComponent<JSX.AiButton & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    disabled?: boolean | undefined;
    type?: import("@ai.s/ui-components/dist/types/components/button/button").Type | undefined;
    constructor?: Function | undefined;
    block?: boolean | undefined;
    size?: import("@ai.s/ui-components/dist/types/components/button/button").Size | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
    htmlType?: string | undefined;
    danger?: boolean | undefined;
    ghost?: boolean | undefined;
    shap?: import("@ai.s/ui-components/dist/types/components/button/button").Shap | undefined;
    href?: string | undefined;
    target?: string | undefined;
    onAiClick?: ((event: CustomEvent<MouseEvent>) => void) | undefined;
}>, {}>;
export declare const AiControl: import("vue").DefineComponent<JSX.AiControl & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    constructor?: Function | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
}>, {}>;
export declare const AiInput: import("vue").DefineComponent<JSX.AiInput & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    disabled?: boolean | undefined;
    readonly?: boolean | undefined;
    value?: string | undefined;
    constructor?: Function | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
    allowClear?: boolean | undefined;
    bordered?: boolean | undefined;
    defaultValue?: string | undefined;
    maxLength?: number | undefined;
    hasPrefix?: boolean | undefined;
    hasSuffix?: unknown;
    placeholder?: string | undefined;
    onAiBlur?: ((event: CustomEvent<MouseEvent>) => void) | undefined;
    onAiChange?: ((event: CustomEvent<any>) => void) | undefined;
    onAiFocus?: ((event: CustomEvent<MouseEvent>) => void) | undefined;
    onAiInput?: ((event: CustomEvent<KeyboardEvent>) => void) | undefined;
    onAiPressEnter?: ((event: CustomEvent<KeyboardEvent>) => void) | undefined;
}>, {}>;
export declare const AiPopover: import("vue").DefineComponent<JSX.AiPopover & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    event: any;
} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    constructor?: Function | undefined;
    component?: any;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
    overlayIndex?: number | undefined;
    componentProps?: unknown;
    backdropDismiss?: boolean | undefined;
    showBackdrop?: boolean | undefined;
    onAiPopoverDidDismiss?: ((event: CustomEvent<any>) => void) | undefined;
    onAiPopoverDidPresent?: ((event: CustomEvent<void>) => void) | undefined;
    onAiPopoverWillDismiss?: ((event: CustomEvent<any>) => void) | undefined;
    onAiPopoverWillPresent?: ((event: CustomEvent<void>) => void) | undefined;
}>, {
    event: any;
}>;
export declare const AiSelect: import("vue").DefineComponent<JSX.AiSelect & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    selected: any;
} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    disabled?: boolean | undefined;
    constructor?: Function | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
    placeholder?: any;
    onAiBlur?: ((event: CustomEvent<void>) => void) | undefined;
    onAiChange?: ((event: CustomEvent<any>) => void) | undefined;
    onAiFocus?: ((event: CustomEvent<void>) => void) | undefined;
    compareWith?: any;
    onAiCancel?: ((event: CustomEvent<void>) => void) | undefined;
    onAiStyle?: ((event: CustomEvent<any>) => void) | undefined;
}>, {
    selected: any;
}>;
export declare const AiSelectOption: import("vue").DefineComponent<JSX.AiSelectOption & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    option: any;
} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    disabled?: boolean | undefined;
    constructor?: Function | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
}>, {
    option: any;
}>;
export declare const AiSelectPopover: import("vue").DefineComponent<JSX.AiSelectPopover & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    constructor?: Function | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
    options?: readonly any[] | undefined;
}>, {}>;
export declare const AiStringfy: import("vue").DefineComponent<JSX.AiStringfy & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    data: any;
} & {
    toString?: string | undefined;
    valueOf?: Object | undefined;
    toLocaleString?: string | undefined;
    constructor?: Function | undefined;
    modelValue?: string | boolean | undefined;
    hasOwnProperty?: ((v: PropertyKey) => boolean) | undefined;
    isPrototypeOf?: ((v: Object) => boolean) | undefined;
    propertyIsEnumerable?: ((v: PropertyKey) => boolean) | undefined;
}>, {
    data: any;
}>;
