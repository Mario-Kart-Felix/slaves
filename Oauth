upstream app {
	server unix:///opt/sock/oauth.sock;
}

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	server_name _;
	return 301 https://$host$request_uri;

}

server {
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;

	
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        include snippets/ssl-params.conf;
	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /opt/app;

	
	index index.html index.htm index.nginx-debian.html;

	server_name _;

        location /static/ {
            try_files $uri =404;
        }

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		allow all;
		include uwsgi_params;
		uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
		uwsgi_param Host $http_host;
		uwsgi_param X-Cluster-Client-Ip $remote_addr;
		uwsgi_pass app;
	}

	

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
		deny all;
	}

}
